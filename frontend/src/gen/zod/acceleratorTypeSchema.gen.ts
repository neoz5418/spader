import { z } from "@/utils/zod.ts";


export const acceleratorTypeSchema = z.object({ "create_time": z.string().datetime().optional(), "update_time": z.union([z.string().datetime(), z.null()]).optional(), "delete_time": z.union([z.string().datetime(), z.null()]).optional(), "name": z.string(), "display_name": z.union([z.string(), z.null()]).optional(), "description": z.union([z.string(), z.null()]).optional(), "enable": z.boolean().default(false).optional(), "gpu_memory": z.number().int().min(0), "memory_size": z.number().int().min(0), "memory_type": z.string(), "memory_bandwidth": z.union([z.string(), z.null()]).optional(), "int8_tensor_core": z.union([z.string(), z.null()]).optional(), "bf16_tensor_core": z.union([z.string(), z.null()]).optional(), "tf32_tensor_core": z.union([z.string(), z.null()]).optional(), "fp32": z.union([z.string(), z.null()]).optional(), "fp64": z.union([z.string(), z.null()]).optional(), "mig": z.union([z.string(), z.null()]).optional(), "l2_cache": z.union([z.string(), z.null()]).optional(), "power": z.union([z.string(), z.null()]).optional(), "pcie": z.union([z.string(), z.null()]).optional(), "nvlink": z.union([z.string(), z.null()]).optional(), "architecture": z.union([z.string(), z.null()]).optional() });
export type AcceleratorTypeSchema = z.infer<typeof acceleratorTypeSchema>;